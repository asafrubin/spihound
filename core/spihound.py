""" SPIHOUND CLI MODULE

The purpose of this module is to provide a CLI for the tool's
features.
"""
###############################################################################
# Modules import path management
import os
import sys
import inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)

###############################################################################
# IMPORTS
from argparse import ArgumentParser
from pandas import read_csv, DataFrame
from lib.sniffer.api.sniffer import sniff
from parser import Parser
from playback import Playback
from analysis import trail, analyze

###############################################################################
# Setup arg parsers
argparser = ArgumentParser(prog='spihound')
subparsers = argparser.add_subparsers(help='commands', dest='command')

###############################################################################
# Sniff ArgParser
sniffparser = subparsers.add_parser(
    'sniff',
    help='Sniff the communication between master-slave devices via BusPirate.\
    IMPORTANT: You must initiate the sniff command before pluging BusPirate\
    to your machine.')

sniffparser.add_argument('port', action='store',
                         help='The USB port BusPirate will be connected to.')
sniffparser.add_argument('-b', metavar='Baudrate', dest='baudrate', type=int,
                         nargs=None, default=False, help='Default: 115200')
sniffparser.add_argument('-p', metavar='Polarity', dest='polarity',
                         type=int, nargs=None, default=False, help='Default: 1')
sniffparser.add_argument('-c', metavar='Clock Edge', dest='clockedge', type=int, nargs=1,
                         default=False, help='Default: 0')

###############################################################################
# Parse ArgParser
parseparser = subparsers.add_parser(
    'parse', help='Parse COM file of data traffic generated by the sniffer and ouput\
    the memory access pattern of the master-slave program.')

parseparser.add_argument(
    'comfile', action='store',
    help='Traffic file generated by sniffing as COM format.')
parseparser.add_argument(
    'config', action='store',
    help='JSON file with the configuration of the slave device.')
parseparser.add_argument(
    '--saveas', dest='saveas', metavar='filename', action='store', type=str, default=False,
    help='Name the output file.')

###############################################################################
# Play ArgParser
playparser = subparsers.add_parser(
    'play',
    help='Playback an animated visualization of a program\'s memory access pattern.\
    Green indicated a write operation; Yellow indicate a read operation.' )

playparser.add_argument('mapfile', action='store',
                         help='Memory access pattern as .csv file')
playparser.add_argument(
    '-saddr', metavar='Start Address', dest='saddr', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Play only from this address (including). Accepts decimal and hexadecimal values.')
playparser.add_argument(
    '-eaddr', metavar='End Address', dest='eaddr', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Play only up to this address (including). Accepts decimal and hexadecimal values.')
playparser.add_argument(
    '-stime', metavar='Start Time', dest='stime', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Play only from this timestamp (including). Accepts decimal values.')
playparser.add_argument(
    '-etime', metavar='End Time', dest='etime', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Play only up to this timestamp (including). Accepts decimal values.')


###############################################################################
# Analyze ArgParser
analyzeparser = subparsers.add_parser(
    'analyze', help='Analyze a memory access pattern and provide details about\
    hotspots on the possibly compromised address space. Using -i allow to focues on specific blocks.\
    This will provide in-depth details per block.')

analyzeparser.add_argument('mapfile', action='store',
                           help='Memory access pattern as .csv file')
analyzeparser.add_argument('blocksize', action='store', type=int,
                           help='Granularity of the block to disect the session\'s address space by.')
analyzeparser.add_argument('-i', nargs='*', type=str, dest='iblocks', help='Addresses of interest.\
                           Show in-depth details per containing block.')


###############################################################################
# Trail ArgParser
trailparser = subparsers.add_parser(
    'trail', help='Show the value trail of an address during the program.')

trailparser.add_argument('mapfile', action='store',
                           help='Memory access pattern as .csv file')
trailparser.add_argument('addr', action='store', type=lambda x: int(x, 0),
                         help='The requested address (Accepts decimal and hexadecimal values).')
trailparser.add_argument(
    '-stime', metavar='Start Time', dest='stime', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Show trail from this timestamp (including). Accepts decimal values.')
trailparser.add_argument(
    '-etime', metavar='End Time', dest='etime', type=lambda x: int(x, 0),
    nargs=None, default=False,
    help='Show trail up to this timestamp (including). Accepts decimal values.')


###############################################################################
# Handle Commands
args = argparser.parse_args()

# --------------------------------------------------------------------------- #
if args.command == 'sniff':
    b = args.baudrate if args.baudrate else None
    p = args.polarity if args.polarity else None
    ce = args.clockedge if args.clockedge else None
    sniff(args.port, baudrate=b, clock_edge=ce, polarity=p)

# --------------------------------------------------------------------------- #
elif args.command == 'parse':
    savename = args.saveas if args.saveas else None

    parser = Parser()
    with open(args.config, 'r') as config:
        parser.config(config)

    with open(args.comfile, 'r') as com:
        if savename == None:
            savename = 'map.csv'
        else:
            savename += '.csv'

        parser.parse(com, csvpath=savename)

# --------------------------------------------------------------------------- #
elif args.command == 'play':
    mapcsv = read_csv(args.mapfile)
    df = DataFrame(mapcsv)

    low_addr = int(min(df['Address']), base=16)
    high_addr = int(max(df['Address']), base=16)
    max_time = max(df['Timestamp(ms)'])

    saddr = args.saddr if args.saddr and args.saddr >= low_addr else low_addr
    eaddr = args.eaddr if args.eaddr and args.eaddr <= high_addr else high_addr
    stime = args.stime if args.stime and args.stime >= 0 else 0 # Time always starts a 0
    etime = args.etime if args.etime and args.etime <= max_time else max_time


    dff = df[(df.Address >= hex(saddr)) & (df.Address <= hex(eaddr)) & (
        df['Timestamp(ms)'] >= stime) & (df['Timestamp(ms)'] <= etime)].reset_index(drop=True)

    playback = Playback(dff, args.mapfile, saddr, eaddr, stime, etime)
    playback.play()
    
# --------------------------------------------------------------------------- #
elif args.command == 'analyze':
    mapcsv = read_csv(args.mapfile)
    df = DataFrame(mapcsv)

    high_addr = int(max(df['Address']), base=16)

    if (args.blocksize < 1) or (args.blocksize > high_addr):
        print('Please provide a valid block size: [1, {0}]'.format(high_addr +1))
        exit()
    
    iblocks = args.iblocks if args.iblocks else None

    analyze(df, args.blocksize, iblocks)

# --------------------------------------------------------------------------- #
elif args.command == 'trail':
    mapcsv = read_csv(args.mapfile)
    df = DataFrame(mapcsv)

    low_addr = int(min(df['Address']), base=16)
    high_addr = int(max(df['Address']), base=16)

    if args.addr < low_addr or args.addr > high_addr:
        print('Address given is out of the session\'s address space [{0}, {1}]'.format(
            min(df['Address'], max(df['Address']))))
        exit()

    max_time = max(df['Timestamp(ms)'])
    stime = args.stime if args.stime and args.stime >= 0 else 0  # Time always starts a 0
    etime = args.etime if args.etime and args.etime <= max_time else max_time

    trail(df, args.addr, stime, etime)

# --------------------------------------------------------------------------- #
else:
    raise ValueError('Unknown command was give: {0}'.format(args.command))
